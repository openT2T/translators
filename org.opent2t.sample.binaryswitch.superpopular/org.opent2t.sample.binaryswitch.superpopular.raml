#%RAML 0.8
title: org.opent2t.sample.binaryswitch.superpopular
version: v1.0

schemas:
  - Switch: !include org.opent2t.sample.binaryswitch.superpopular.json
  - Subscription: |
      {
        "type": "object",
        "properties": {
          "callbackUrl": { "type": "string" },
          "expiration": { "type": "number" },
          "response": { "type": "string"}
        }
      }

traits:
  - interface:
      queryParameters:
        if:
          enum: ["oic.if.a"]

/BinarySwitchResURI:
  description: |
    This resource describes the attributes associated with control of a Switch.
    The value is a boolean.
    A value of 'true' means that the switch is on.
    A value of 'false' means that the switch is off.


  displayName: Switch
  is: [ interface ]

  get:
    description: |
        Retrieves the current resource representation
    responses:
      200:
        body:
          application/json:
            schema: Switch
            example: |
              {
                "rt": "org.opent2t.sample.binaryswitch.superpopular",
                "id": "unique_example_id",
                "power": {
                  "value": true
                  }
              }
    
  post:
    body:
      application/json:
        schema: Switch
        example: |
          {
            "power": {
              "value": false
            }
          }
    responses:
      200:
        body:
          application/json:
            schema: Switch
            example: |
              {
                "id": "unique_example_id",
                "power": {
                  "value": false
                }
              }

/SubscribeBinarySwitchResURI:
  description: |
   This resource manages subscriptions to changes on this device.
  displayName: SubscribeBinarySwitch
  is: [ interface ]
    
  post:
    description: |
        Creates or refreshes a subscription to this binary switch.  This method should be called twice, first with
        a callback URL (verificationRequest will be ignored), and the second time with the parameters of an http GET to the
        callback Url server for verification of the subscription (in which case callback Url will be ignored). The second call
        will construct a response that should be returned to the notifications server.
    body:
      application/json:
        schema: Subscription
        example: |
          {
            "callbackUrl": "http://myserver.com",
          }    
    responses:
       200:
        body:
          application/json:
            schema: Subscription
            example: |
                {
                  "callbackUrl":"http://myserver.com",
                  "expiration": "123456678",
                  "response": { "plain text response" }
                }
       400:
          body:
            application/json:
              example: { "message": "Bad request" }
       403:
          body:
            application/json:
              example: { "message": "Subscription is denied" }

  delete:
    description: Unsubscribes to notifications to a callback Url
    body:
      application/json:
        schema: Subscription
        example: |
          {
            "callbackUrl": "http://myserver.com",
          } 
    responses:
      200:
        body:
          application/json:
          example: {}
                
